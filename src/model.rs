use algonaut::transaction::{SignedTransaction, Transaction};
use anyhow::Result;
use data_encoding::BASE64;
use serde::{Deserialize, Serialize};

/// The transactions to perform the swap, generated by the swap's creator,
/// sent to the peer to finish signing and submit to the network.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SwapRequest {
    /// Creator's transaction: already signed.
    pub signed_tx: SignedTransaction,
    /// Peer's transaction: to be signed.
    pub unsigned_tx: Transaction,
}

impl SwapRequest {
    pub fn as_url_encoded_str(&self) -> Result<String> {
        let serialized = BASE64.encode(&rmp_serde::to_vec_named(self)?);
        Ok(urlencoding::encode(&serialized).to_string())
    }

    pub fn from_url_encoded_str(str: String) -> Result<SwapRequest> {
        Ok(rmp_serde::from_slice(
            &BASE64.decode(urlencoding::decode(&str)?.as_bytes())?,
        )?)
    }
}
